#include <stdio.h>
#include <stdlib.h>

int  selection_sort(int *arrayo,int length){
	if(length == 0)
		return 0;
	int lElement = arrayo[0];
	int candidate = 0;
	for(int i = 0;i < length;i++){
		if(lElement < arrayo[i]){
			lElement = arrayo[i];
			candidate = i;
		}
	}
	int tempo = arrayo[length-1];
	arrayo[(length-1)] = arrayo[candidate];
	arrayo[candidate] = tempo;

	selection_sort(arrayo,length-1);
	/*for(int j = 0;i<length;j++){
	int last lastIndexo = length-j;
	int candidate = -1;
	for(int i =0;i<lastIndexo;i++){
		if(lElement <  arrayo[i]){
			candidate = i;
		}
	}
	int tempo = arrayo[lastindexo];
	arrayo[lastindexo] = cadidate;
	arrayo[candidate] = tempo;

	}*/
	return 0;
}
int main(void){
	int numbo;
	printf("Please tell me the amount of numbers you wish to organize : \n");
	scanf("%d",&numbo);

	int arrato[numbo];
	//while(scanf("%d", &arrato[i++]) == 1);
	for(int i = 0; i < numbo;i++){
	scanf("%d",&arrato[i]);
	}
	printf("Your numbers : \n");
	//arrato = {0,1};
	selection_sort(arrato,numbo);
	for(int i = 0; i < numbo; i ++){
	printf("%d \n",arrato[i]);
	}

		
	
}
/*********************************************************
 * From C PROGRAMMING: A MODERN APPROACH, Second Edition *
 * By K. N. King                                         *
 * Copyright (c) 2008, 1996 W. W. Norton & Company, Inc. *
 * All rights reserved.                                  *
 * This program may be freely distributed for class use, *
 * provided that this copyright notice is retained.      *
 *********************************************************/

/* poker.c (Chapter 10, page 233) */
/* Classifies a poker hand */

#include <stdbool.h>   /* C99 only */
#include <stdio.h>
#include <stdlib.h>

#define NUM_RANKS 13
#define NUM_SUITS 4
#define NUM_CARDS 5

/* external variables */
bool straight, flush, four, three;
int pairs;   /* can be 0, 1, or 2 */

/* prototypes */
void read_cards(int num_in_rank[NUM_RANKS],int num_in_suit[NUM_SUITS]);
void analyze_hand(int num_in_rank[NUM_RANKS],int num_in_suit[NUM_SUITS]);
void print_result(void);

/**********************************************************
 * main: Calls read_cards, analyze_hand, and print_result *
 *       repeatedly.                                      *
 **********************************************************/
int main(void)
{
int num_in_rank[NUM_RANKS];
int num_in_suit[NUM_SUITS];
  for (;;) {
    read_cards(num_in_rank,num_in_suit);
    analyze_hand(num_in_rank,num_in_suit);
    print_result();
  }
}

/**********************************************************
 * read_cards: Reads the cards into the external          *
 *             variables num_in_rank and num_in_suit;     *
 *             checks for bad cards and duplicate cards.  *
 **********************************************************/
void read_cards(int num_in_rank[NUM_RANKS],int num_in_suit[NUM_SUITS])
{
  bool card_exists[NUM_RANKS][NUM_SUITS];
  char ch, rank_ch, suit_ch;
  int rank, suit;
  bool bad_card;
  int cards_read = 0;

  for (rank = 0; rank < NUM_RANKS; rank++) {
    num_in_rank[rank] = 0;
    for (suit = 0; suit < NUM_SUITS; suit++)
      card_exists[rank][suit] = false;
  }

  for (suit = 0; suit < NUM_SUITS; suit++)
    num_in_suit[suit] = 0;

  while (cards_read < NUM_CARDS) {
    bad_card = false;

    printf("Enter a card: ");

    rank_ch = getchar();
    switch (rank_ch) {
      case '0':           exit(EXIT_SUCCESS);
      case '2':           rank = 0; break;
      case '3':           rank = 1; break;
      case '4':           rank = 2; break;
      case '5':           rank = 3; break;
      case '6':           rank = 4; break;
      case '7':           rank = 5; break;
      case '8':           rank = 6; break;
      case '9':           rank = 7; break;
      case 't': case 'T': rank = 8; break;
      case 'j': case 'J': rank = 9; break;
      case 'q': case 'Q': rank = 10; break;
      case 'k': case 'K': rank = 11; break;
      case 'a': case 'A': rank = 12; break;
      default:            bad_card = true;
    }

    suit_ch = getchar();
    switch (suit_ch) {
      case 'c': case 'C': suit = 0; break;
      case 'd': case 'D': suit = 1; break;
      case 'h': case 'H': suit = 2; break;
      case 's': case 'S': suit = 3; break;
      default:            bad_card = true;
    }

    while ((ch = getchar()) != '\n')
      if (ch != ' ') bad_card = true;

    if (bad_card)
      printf("Bad card; ignored.\n");
    else if (card_exists[rank][suit])
      printf("Duplicate card; ignored.\n");
    else {
      num_in_rank[rank]++;
      num_in_suit[suit]++;
      card_exists[rank][suit] = true;
      cards_read++;
    }
  }
}

/**********************************************************
 * analyze_hand: Determines whether the hand contains a   *
 *               straight, a flush, four-of-a-kind,       *
 *               and/or three-of-a-kind; determines the   *
 *               number of pairs; stores the results into *
 *               the external variables straight, flush,  *
 *               four, three, and pairs.                  *
 **********************************************************/
void analyze_hand(int num_in_rank[NUM_RANKS],int num_in_suit[NUM_SUITS])
{
  int num_consec = 0;
  int rank, suit;

  straight = false;
  flush = false;
  four = false;
  three = false;
  pairs = 0;

  /* check for flush */
  for (suit = 0; suit < NUM_SUITS; suit++)
    if (num_in_suit[suit] == NUM_CARDS)
      flush = true;

  /* check for straight */
  rank = 0;
  while (num_in_rank[rank] == 0) rank++;
  for (; rank < NUM_RANKS && num_in_rank[rank] > 0; rank++)
    num_consec++;
  if (num_consec == NUM_CARDS) {
    straight = true;
    return;
  }

  /* check for 4-of-a-kind, 3-of-a-kind, and pairs */
  for (rank = 0; rank < NUM_RANKS; rank++) {
    if (num_in_rank[rank] == 4) four = true;
    if (num_in_rank[rank] == 3) three = true;
    if (num_in_rank[rank] == 2) pairs++;
  }
}

/**********************************************************
 * print_result: Prints the classification of the hand,   *
 *               based on the values of the external      *
 *               variables straight, flush, four, three,  *
 *               and pairs.                               *
 **********************************************************/
void print_result(void)
{
  if (straight && flush) printf("Straight flush");
  else if (four)         printf("Four of a kind");
  else if (three &&
           pairs == 1)   printf("Full house");
  else if (flush)        printf("Flush");
  else if (straight)     printf("Straight");
  else if (three)        printf("Three of a kind");
  else if (pairs == 2)   printf("Two pairs");
  else if (pairs == 1)   printf("Pair");
  else                   printf("High card");

  printf("\n\n");
}
/*********************************************************
 * From C PROGRAMMING: A MODERN APPROACH, Second Edition *
 * By K. N. King                                         *
 * Copyright (c) 2008, 1996 W. W. Norton & Company, Inc. *
 * All rights reserved.                                  *
 * This program may be freely distributed for class use, *
 * provided that this copyright notice is retained.      *
 *********************************************************/

/* poker.c (Chapter 10, page 233) */
/* Classifies a poker hand */

//IM JUST GONNA PUT THE COMMENT ON LINE ~140 OF THIS FILE

#include <stdbool.h>   /* C99 only */
#include <stdio.h>
#include <stdlib.h>

#define NUM_RANKS 13
#define NUM_SUITS 4
#define NUM_CARDS 5

/* external variables */
int num_in_rank[NUM_RANKS];
int num_in_suit[NUM_SUITS];
bool straight, flush, four, three,royalFlusho;
int pairs;   /* can be 0, 1, or 2 */

/* prototypes */
void read_cards(void);
void analyze_hand(void);
void print_result(void);

/**********************************************************
 * main: Calls read_cards, analyze_hand, and print_result *
 *       repeatedly.                                      *
 **********************************************************/
int main(void)
{
	for (;;) {
		read_cards();
		analyze_hand();
		print_result();
	}
}

/**********************************************************
 * read_cards: Reads the cards into the external          *
 *             variables num_in_rank and num_in_suit;     *
 *             checks for bad cards and duplicate cards.  *
 **********************************************************/
void read_cards(void)
{
	bool card_exists[NUM_RANKS][NUM_SUITS];
	char ch, rank_ch, suit_ch;
	int rank, suit;
	bool bad_card;
	int cards_read = 0;

	for (rank = 0; rank < NUM_RANKS; rank++) {
		num_in_rank[rank] = 0;
		for (suit = 0; suit < NUM_SUITS; suit++)
			card_exists[rank][suit] = false;
	}

	for (suit = 0; suit < NUM_SUITS; suit++)
		num_in_suit[suit] = 0;

	while (cards_read < NUM_CARDS) {
		bad_card = false;

		printf("Enter a card: ");

		rank_ch = getchar();
		switch (rank_ch) {
			case '0':           exit(EXIT_SUCCESS);
			case '2':           rank = 0; break;
			case '3':           rank = 1; break;
			case '4':           rank = 2; break;
			case '5':           rank = 3; break;
			case '6':           rank = 4; break;
			case '7':           rank = 5; break;
			case '8':           rank = 6; break;
			case '9':           rank = 7; break;
			case 't': case 'T': rank = 8; break;
			case 'j': case 'J': rank = 9; break;
			case 'q': case 'Q': rank = 10; break;
			case 'k': case 'K': rank = 11; break;
			case 'a': case 'A': rank = 12; break;
			default:            bad_card = true;
		}

		suit_ch = getchar();
		switch (suit_ch) {
			case 'c': case 'C': suit = 0; break;
			case 'd': case 'D': suit = 1; break;
			case 'h': case 'H': suit = 2; break;
			case 's': case 'S': suit = 3; break;
			default:            bad_card = true;
		}

		while ((ch = getchar()) != '\n')
			if (ch != ' ') bad_card = true;

		if (bad_card)
			printf("Bad card; ignored.\n");
		else if (card_exists[rank][suit])
			printf("Duplicate card; ignored.\n");
		else {
			num_in_rank[rank]++;
			num_in_suit[suit]++;
			card_exists[rank][suit] = true;
			cards_read++;
		}
	}
}

/**********************************************************
 * analyze_hand: Determines whether the hand contains a   *
 *               straight, a flush, four-of-a-kind,       *
 *               and/or three-of-a-kind; determines the   *
 *               number of pairs; stores the results into *
 *               the external variables straight, flush,  *
 *               four, three, and pairs.                  *
 **********************************************************/
void analyze_hand(void)
{
	int num_consec = 0;
	int rank, suit;
	int royalo[NUM_CARDS] = {12,11,10,9,8};

	royalFlusho = false;
	straight = false;
	flush = false;
	four = false;
	three = false;
	pairs = 0;

	//check for royal flush 
	for(suit = 0;suit < NUM_SUITS;suit++){//we pretty much take the ideas from the loops below but just add an extra filter to find what the rank of the cards aree so we can say its a proper royal flush
		if(num_in_suit[suit] == NUM_CARDS){
			for(rank = 8;rank <= 12;rank++){
				printf("Num amount = %d, we are in rank %d \n",num_in_rank[rank],rank); 
				if(num_in_rank[rank] >= 1){
					royalFlusho = 1;
				}
			}
		}
	}


	/* check for flush */
	for (suit = 0; suit < NUM_SUITS; suit++)
		if (num_in_suit[suit] == NUM_CARDS)
			flush = true;

	/* check for straight */
	rank = 0;
	while (num_in_rank[rank] == 0) rank++;
	for (; rank < NUM_RANKS && num_in_rank[rank] > 0; rank++)
		num_consec++;
	if (num_consec == NUM_CARDS) {
		straight = true;
		return;
	}

	/* check for 4-of-a-kind, 3-of-a-kind, and pairs */
	for (rank = 0; rank < NUM_RANKS; rank++) {
		if (num_in_rank[rank] == 4) four = true;
		if (num_in_rank[rank] == 3) three = true;
		if (num_in_rank[rank] == 2) pairs++;
	}
}

/**********************************************************
 * print_result: Prints the classification of the hand,   *
 *               based on the values of the external      *
 *               variables straight, flush, four, three,  *
 *               and pairs.                               *
 **********************************************************/
void print_result(void)
{
	printf("royalFlusho value : %d ", royalFlusho);
	
	if(royalFlusho) printf("Royal Flush");
	else if (straight && flush) printf("Straight flush");
	else if (four)         printf("Four of a kind");
	else if (three &&
			pairs == 1)   printf("Full house");
	else if (flush)        printf("Flush");
	else if (straight)     printf("Straight");
	else if (three)        printf("Three of a kind");
	else if (pairs == 2)   printf("Two pairs");
	else if (pairs == 1)   printf("Pair");
	else                   printf("High card");

	printf("\n\n");
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define MAX_DIGITS 10
#define COLUMN_N 4
#define ROW_N 3
#define MAX_S_SIZE 100
//BY LUIS GARCIA 
//ALL MY CODE CAN BE FOUND AT GITHUB under the username "abuklao" repository "progra_class"
//Thank you for your work :3

//functions prototypes
//clean input string makes sure we only take numbers
//clear digits array prepares the long array for when we want to print our numbers
//process digits array receives a number and puts it into digitsArray to alter be printed
//print digits array...well ptrints the digits
void clean_inp_string(char *s,int *numerosArray,int *amountOfDigits);
void clear_digits_array(void);
void process_digit(int digit, int position);
void print_digits_array(void);

//arrays to be used 
////segment array is used for storing the structure of the digits when printed in a 4x3 array
int segmentsA[10][7] = {{1,1,1,1,1,1,0},{0,1,1,0,0,0,0},{1,1,0,1,1,0,1},{1,1,1,1,0,0,1},{0,1,1,0,0,1,1},{1,0,1,1,0,1,1},{1,0,1,1,1,1,1},{1,1,1,0,0,0,0},{1,1,1,1,1,1,1},{1,1,1,0,0,1,1}};
//digits arrat 
//this is the array to be printed as result
char digitsArray[ROW_N][MAX_DIGITS*COLUMN_N];
//this is a 4x3 array that helps us related the values on a the array to print and the actual position of each digit 
//the negative number acts as a null
int correspondence[3][4] = {{-1,-1,0,-1},{-1,5,6,1},{-1,4,3,2}};

//main function
int main(void){
	//big str just in case
	//ammount of digits is used to loop through the array of numbers
	char str[MAX_S_SIZE];
	int amountOfDigits = 0;
	//aray of numbers
	int numberArray[MAX_DIGITS];
	
	//asking for values
	printf("Please enter your number : \n");
	fgets(str,MAX_S_SIZE-1,stdin);
	printf("This is your string %s \n", str);
	
	//we take the fiven string and take ONLY DIGIT values verything else is ignored
	clean_inp_string(str,numberArray,&amountOfDigits);
	
	//we prepare the array before putting in the numbers
	clear_digits_array();
	//we loop through the array of numbers and then process them in process_digit that puts it in the array to print
	for(int i = 0;i<amountOfDigits;i++){
		process_digit(numberArray[i],i);
	}
	//we print the array
	print_digits_array();

	return 0;
}
void clean_inp_string(char *s,int *numeroArr,int *amountOfDigits){
	int amountD=0;
	//we loop through every character of the inputed string
	for(int i = 0; i < strlen(s);){
		//if we loop through a digit and we still have space to spare in our array then we add it to our array
		if(isdigit(*(s+i)) || amountD >= MAX_DIGITS){
			//we conver the character that is integer into an actual integer type
			int ledigit = *(s+i) - '0';
			//we put it into our number array
			*(numeroArr+amountD)= ledigit;	
			
			//add to the amount of integers
			amountD += 1;
		}

		//keep looping through characters
		i++;

	}
	//this is just for safety
	//in case the above loop mistakenly adds one extra case
	if(amountD >= MAX_DIGITS)
		amountD = MAX_DIGITS;
	*amountOfDigits = amountD;


}
void clear_digits_array(){
//we prpetty much loop through the columns and array filling them with blank space.
	for(int i = 0;i < ROW_N; i++){
		for(int j = 0;j < (COLUMN_N*MAX_DIGITS);j++){
			digitsArray[i][j] = ' ';
		}
	}
}
void process_digit(int digit, int pos){
//we loop through every column on the given position.(every position contains four columns
	for(int col_pos = 0; col_pos < COLUMN_N;col_pos++){
		//we calculate the precise spot of the column
		int actual_c_pos = col_pos + (pos*COLUMN_N);
		//we take the position of the row and determine if we can print something, if so, is it a underscore or a vertical line ?
		for(int row_pos = 0;row_pos < ROW_N;ROW_N,row_pos++){

			char toPrint = ' ';
			if(col_pos == 1 || col_pos == (COLUMN_N-1)){	
				//we print |
				toPrint = '|';
			} 
			else if(col_pos == 2){
				//we print underscore _
				toPrint = '_';
			}
			int segment_index = correspondence[row_pos][col_pos];
			if(segment_index != -1){
				int bool_filled = segmentsA[digit][segment_index];
				if(bool_filled == 1){
					//printf("Digit: %d - Correspondence: %d -  Row:%d Col:%d \n",digit,correspondence[row_pos][col_pos],row_pos,col_pos);
					digitsArray[row_pos][actual_c_pos] = toPrint;

				}
			}
		}
	}
}
//pretty straight forward. we print everything
void print_digits_array(){
	printf("\n");
	for(int r = 0; r < ROW_N ;r++){
		//printf("\n");
		for(int c = 0;c < (MAX_DIGITS * COLUMN_N);c++){
			char toPrint = digitsArray[r][c];
			printf("%c",toPrint);
		}
		printf("\n");
	}
}
